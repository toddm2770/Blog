@using BlazorAuthTemplate.Client.Helpers
@inject ICategoryService CategoryService

@if (BlogPost != null)
{
	<EditForm Model="BlogPost" OnValidSubmit="HandleSubmit" class="row">
		<DataAnnotationsValidator />

		<div class="col-lg-4">
			@*Title*@
			<div class="mb-2">
				<label class="form-label">Title</label>
				<InputText class="form-control" @bind-Value="BlogPost.Title" />
				<ValidationMessage For="() => BlogPost.Title" />
			</div>
			@*Abstract*@
			<div class="mb-2">
				<label class="form-label">Abstract</label>
				<InputTextArea class="form-control" @bind-Value="BlogPost.Abstract" rows="3" />
				<ValidationMessage For="() => BlogPost.Abstract" />
			</div>
			@*Category*@
			<div class="mb-2">
				<label class="form-label">Category</label>
				<InputSelect class="form-select" @bind-Value="BlogPost.CategoryId">
					<option value="">Select a Category</option>
					@foreach (CategoryDTO category in categories)
					{
						<option value="@category.Id">@category.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="() => BlogPost.CategoryId" />
			</div>
			@*Image*@
			<div class="mb-2">
				<label class="form-label">Image</label>
				<img class="img-fluid rounded-3" style="max-height: 350px" 
						src="@(string.IsNullOrEmpty(BlogPost.ImageUrl) ? ImageHelper.DefaultBlogImage : BlogPost.ImageUrl)" />
				<InputFile class="form-control" accept=".png, .jpg, .jpeg, .svg" OnChange="HandleFileChange" @bind-Value="BlogPost.ImageUrl" />
				<span class="text-danger">@fileError</span>
			</div>
		</div>
		<div class="col-lg-8 vstack gap-2">
			@* post content*@
			<div class="flex-fill vstack">
				<label class="form-label">Content</label>
				<TinyMCE.Blazor.Editor ScriptSrc="/tinymce/tinymce.min.js"
									   @bind-Value="BlogPost.Content"
									   Field="() => BlogPost.Content"
									   ClassName="rich-text-editor"
									   Conf="editorConfig" />
				<ValidationMessage For="() => BlogPost.Content" />
			</div>
		</div>
		@*Tags*@
		<div class="mb-2">
			<label class="form-label">Tags</label>
			<InputText @bind-Value="tagNames" class="form-control" />
		</div>
		@*Slug*@
		<div class="mb-2">
			<label class="form-label">Slug</label>
			<InputText @bind-Value="BlogPost.Slug" class="form-control" />
		</div>
		<div class="col-12">
			@*isPublished*@
			<div class="form-check">
				<label class="form-check-label">
					<InputCheckbox class="form-check-input" @bind-Value="BlogPost.IsPublished" />
					Publish
				</label>
			</div>
			<button class="btn btn-primary" type="submit">Save</button>
		</div>

	</EditForm>
}

@code {

	[Parameter, EditorRequired]
	public BlogPostDTO? BlogPost { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<BlogPostDTO> OnSubmit { get; set; }

	private IEnumerable<CategoryDTO> categories = [];

	private string? fileError;

	private string tagNames = string.Empty;

	// tinyMCE config
	private static readonly Dictionary<string, object> editorConfig = new()
    {
        { "toolbar", "undo redo | bold italic underline | link codesample " },
        { "plugins", "anchor autolink link charmap preview table codesample" },
        { "default_link_target", "_blank" },
        { "link_assume_external_targets", true },
        { "link_context_toolbar", true },
        { "codesample_languages", new object[] {
                new { text = "HTML/XML", value = "markup" },
                new { text = "JavaScript", value = "javascript" },
                new { text = "CSS", value = "css" },
                new { text = "C#", value = "csharp" },
                new { text = "Razor", value = "razor" },
                new { text = "JSON", value = "json" },
    }
        },
        { "codesample_global_prismjs", true },
        { "promotion", false },
        { "height", "100%" },
    };

	protected override async Task OnInitializedAsync()
	{
		try
		{
			categories = await CategoryService.GetCategoriesAsync();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}

	protected override void OnParametersSet()
	{
		if(BlogPost == null)
		{
			return;
		}

		List<string> names = [];

		foreach (TagDTO tag in BlogPost.Tags!)
		{
			names.Add(tag.Name!);
		}

		tagNames = string.Join(", ", names);
	}

	private async Task HandleSubmit()
	{
		try
		{
			IEnumerable<string> listofTagNames = tagNames.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);

			List<TagDTO> tags = [];

			foreach(string name in listofTagNames)
			{
				TagDTO tag = new TagDTO() { Name = name };
				tags.Add(tag);
			}

			BlogPost!.Tags = tags;

			await OnSubmit.InvokeAsync(BlogPost);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}

	private async Task HandleFileChange(InputFileChangeEventArgs args)
	{
		fileError = null;

		IBrowserFile selectedFile = args.File;

		if (selectedFile.Size > ImageHelper.MaxFileSize)
		{
			fileError = "The selected image is too large.";
		}

		try
		{
			BlogPost!.ImageUrl = await ImageHelper.GetDataUrlAsync(selectedFile);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			fileError = "Could not read the selected file.";
		}
	}
}
