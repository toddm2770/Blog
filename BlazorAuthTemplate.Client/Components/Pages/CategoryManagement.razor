@page "/categories"
@using BlazorAuthTemplate.Client.Helpers

@rendermode InteractiveServer

@inject ICategoryService CategoryService

<div class="container">
	<EditForm Model="formCategory" OnValidSubmit="HandleSubmit">
		<DataAnnotationsValidator/>
				<div class="row">
					<div class="col-4">
						<img src="@(string.IsNullOrEmpty(formCategory?.ImageUrl) ? ImageHelper.DefaultCategoryImage : formCategory?.ImageUrl )" 
							class="square-img-container rounded-start overflow-hidden" style="max-height: 350px" />
						<span class="text-danger">@fileError</span>
					</div>
					<div class="col-8">
						<div class="vstack">
							<label for="categoryName" class="form-label">Name</label>
							<InputText class="form-control" placeholder="Category Name" @bind-Value="formCategory!.Name"/>
							<ValidationMessage For="() => formCategory.Name" />

							<label for="categoryDescription" class="form-label">Description</label>
							<InputTextArea class="form-control" placeholder="Describe the category" @bind-Value="formCategory.Description" rows="3"></InputTextArea>
							<ValidationMessage For="() => formCategory.Description" />	

							<label for="categoryImage" class="form-label">Image</label>
							<InputFile OnChange="OnFileChange" @bind-Value="formCategory.ImageUrl" class="form-control" accept=".png, .jpg, .jpeg, .svg" />
							<ValidationMessage For="() => formCategory.ImageUrl" />
						</div>
						<div>
							<button type="submit" class="btn btn-primary mt-2 text-end">
								Save
							</button>
						</div>
					</div>
				</div>
	</EditForm>

	@foreach (var Category in categories)
	{
		<div class="col" @key="Category.Id">
			<CategoryCard Category="Category" OnDeleteCallBack="DeleteCategory" OnEditCallBack="UpdateCategory"></CategoryCard>
		</div>
	}

</div>

@code {

	private CategoryDTO formCategory = new CategoryDTO();

	private IEnumerable<CategoryDTO> categories = [];

	private CategoryDTO? Category { get; set; }

	private string? fileError;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			categories = await CategoryService.GetCategoriesAsync();
		}
		catch (Exception ex)
		{

			Console.WriteLine(ex);
		}
	}

	private async Task HandleSubmit()
	{
		try
		{
			if(formCategory is not null)
			{
				await CategoryService.CreateCategoryAsync(formCategory);

				formCategory = new CategoryDTO();

				categories = await CategoryService.GetCategoriesAsync();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}

	private async Task OnFileChange(InputFileChangeEventArgs changeEvent)
	{
		fileError = null;

		IBrowserFile selectedFile = changeEvent.File;

		if (selectedFile.Size > ImageHelper.MaxFileSize)
		{
			fileError = "The selected image is too large.";
		}

		try
		{

			formCategory!.ImageUrl = await ImageHelper.GetDataUrlAsync(selectedFile);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			fileError = "Could not read the selected file.";
		}
	}

	private async Task DeleteCategory(CategoryDTO category)
	{

		try
		{
			await CategoryService.DeleteCategoryAsync(category!.Id);

			categories = await CategoryService.GetCategoriesAsync();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}
	private async Task UpdateCategory(CategoryDTO category)
	{
		try
		{

			await CategoryService.UpdateCategoryAsync(category);

			Category = new CategoryDTO();

			categories = await CategoryService.GetCategoriesAsync();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}
}
