@using BlazorAuthTemplate.Client.Helpers
@using BlazorAuthTemplate.Client.Models
@using BlazorAuthTemplate.client.Services.Interfaces

@inject ICategoryService CategoryService
@inject IBlogPostService BlogPostService


<div class="offcanvas-lg offcanvas-end" id="sidebarBlog">
    <div class="offcanvas-header">
        <h4 class="offcanvas-title">Sidebar</h4>
        <button class="btn-close ms-auto" type="button" data-bs-dismiss="offcanvas" data-bs-target="#sidebarBlog" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">

        <!-- Search box -->
        <form action="search" method="get" class="position-relative mb-4 mb-lg-5">
            <i class="ai-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            <input name="query" value="@Query" class="form-control ps-5" type="search" placeholder="Enter keyword">
        </form>

        <!-- Category links -->
        <h4 class="pt-1 pt-lg-0 mt-lg-n2">Categories:</h4>
        <ul class="nav flex-column mb-lg-5 mb-4">
            @if (categories != null)
            {
                @foreach (CategoryDTO category in categories)
                {
                    <li>
                        <a class="nav-link d-flex p-0" href="/PostsByCategory/@category.Id">
                            @category.Name
                            <span class="fs-sm text-body-secondary ms-2">@category!.Posts.Count</span>
                        </a>
                    </li>
                }
            }
        </ul>

        <!-- Featured posts widget -->
        <h4 class="pt-3 pt-lg-0 pb-1">Popular posts:</h4>
        <div class="mb-lg-5 mb-4">
            @if(blogPosts != null)
            {
                @foreach(BlogPostDTO blogPost in blogPosts)
                {
                <article class="position-relative d-flex align-items-center mb-4">
                        <img class="rounded" src="@(string.IsNullOrEmpty(blogPost?.ImageUrl) ? ImageHelper.DefaultCategoryImage : blogPost?.ImageUrl)" width="92" alt="Post image">
                    <div class="ps-3">
                        <h4 class="h6 mb-2">
                                <a class="stretched-link" href="/">
                                @blogPost.Title
                            </a>
                        </h4>
                        <div class="fs-sm text-body-secondary">
                            @blogPost.Comments.Count
                        </div>
                        <div class="fs-sm text-body-secondary">
                            @blogPost.Created.LocalDateTime
                        </div>
                    </div>
                </article>
                }
            }
        </div>

        <!-- Social buttons -->
        <h4 class="pt-3 pt-lg-0 pb-1">Follow me:</h4>
        <div class="d-flex mt-n3 ms-n3 mb-lg-5 mb-4 pb-3 pb-lg-0">
            <a class="btn btn-secondary btn-icon btn-sm btn-instagram rounded-circle mt-3 ms-3" href="#" aria-label="Instagram">
                <i class="ai-github"></i>
            </a>
            <a class="btn btn-secondary btn-icon btn-sm btn-facebook rounded-circle mt-3 ms-3" href="#" aria-label="Facebook">
                <i class="ai-facebook"></i>
            </a>
            <a class="btn btn-secondary btn-icon btn-sm btn-telegram rounded-circle mt-3 ms-3" href="#" aria-label="Telegram">
                <i class="ai-youtube"></i>
            </a>
            <a class="btn btn-secondary btn-icon btn-sm btn-x rounded-circle mt-3 ms-3" href="#" aria-label="X">
                <i class="ai-linkedin"></i>
            </a>
        </div>

        @* <!-- Banner -->
        <div class="position-relative mb-3">
        <div class="position-absolute w-100 text-center top-0 start-50 translate-middle-x pt-4" style="max-width: 15rem;" data-bs-theme="light">
        <h3 class="h2 pt-3 mb-0">Your banner here!</h3>
        </div>
        <img class="rounded-5" src="assets/img/blog/sidebar/banner.jpg" alt="Banner">
        </div> *@
    </div>
</div>


@code {
    [SupplyParameterFromQuery]
    public string? Query { get; set; }

    public IEnumerable<CategoryDTO> categories = [];

    public IEnumerable<BlogPostDTO> blogPosts = [];

    public int Count = 5;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await CategoryService.GetTopCategoriesAsync(Count);

            blogPosts = await BlogPostService.GetTopBlogPostsAsync(Count);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

}
