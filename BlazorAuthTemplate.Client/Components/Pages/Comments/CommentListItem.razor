@using BlazorAuthTemplate.Client.Helpers
@if (Comment is not null)
{
    <div class="border-bottom py-4 mt-2 mb-4">

        <div class="d-flex align-items-center pb-1 mb-3">
            <img class="rounded-circle" src="@(Comment.AuthorImageUrl ?? ImageHelper.DefaultProfilePicture)" width="48" alt="Comment author image">
            <div class="ps-3">
                <h6 class="mb-0">@Comment.AuthorName</h6>
                <span class="fs-sm text-body-secondary">
                    @Comment.Created.ToString("g")
                </span>
            </div>
        </div>
        @if (status == Status.Viewing)
        {
            <p class="pb-2 mb-0">
                @Comment.Content
            </p>
            @if (Comment.Updated.HasValue)
            {
                <p class="pb-2 mb-0 fs-sm">
                    <i>Updated @Comment.Updated.Value.ToString("g")</i>
                    @if (!string.IsNullOrEmpty(Comment.UpdateReason))
                    {
                        <br />
                        <i><b>Reason:</b> @Comment.UpdateReason</i>
                    }
                </p>
            }
            <AuthorizeView>
                @if (Editable || context.User.IsInRole("Author") || context.User.IsInRole("Moderator"))
                {
                    <div class="hstack gap-2">
                        <button class="nav-link fs-sm fw-semibold px-0 py-2" type="button" @onclick="BeginEdit">
                            <i class="ai-pencil" aria-label="Edit"></i>
                        </button>
                        <span class="text-muted">|</span>
                        <button class="nav-link fs-sm fw-semibold px-0 py-2 text-danger" type="button" @onclick="() => status = Status.Deleting">
                            <i class="ai-trash" aria-label="Delete"></i>
                        </button>
                    </div>
                }
            </AuthorizeView>
        }
        else if (status == Status.Deleting)
        {
            <p class="pb-2 mb-0">
                @Comment.Content
            </p>
            <div class="hstack gap-2">
                <span class="text-danger">Are you sure you want to delete this?</span>
                <button class="btn btn-sm btn-danger fs-sm py-1 px-2" type="button" @onclick="HandleDelete">
                    Delete
                </button>
                <button class="btn btn-sm btn-outline-secondary fs-sm py-1 px-2" type="button" @onclick="() => status = Status.Viewing">
                    Cancel
                </button>
            </div>
        }
        else if (status == Status.Editing && editComment is not null)
        {
            <EditForm Model="editComment" OnValidSubmit="HandleEdit">
                <DataAnnotationsValidator />
                <InputTextArea @bind-Value="editComment.Content" class="form-control mb-2" rows="3" />
                <div class="form-group">
                    <label class="form-label">
                        Update Reason
                    </label>
                    <InputText @bind-Value="editComment.UpdateReason" class="form-control mb-2" />
                </div>

                <div class="hstack gap-2">
                    <button class="nav-link fs-sm px-0 py-2" type="submit">
                        <i class="ai-check text-success me-1" aria-label="Save"></i>
                        Save
                    </button>
                    <span class="text-muted">|</span>
                    <button class="nav-link fs-sm px-0 py-2" type="button" @onclick="() => status = Status.Viewing">
                        <i class="ai-circle-x text-danger me-1" aria-label="cancel"></i>
                        Cancel
                    </button>
                </div>
            </EditForm>
        }

    </div>
}

@code {
    [Parameter, EditorRequired]
    public CommentDTO? Comment { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<CommentDTO> OnEdit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<CommentDTO> OnDelete { get; set; }

    [Parameter, EditorRequired]
    public bool Editable { get; set; }

    private enum Status
    {
        Viewing,
        Editing,
        Deleting
    }

    private Status status = Status.Viewing;

    private CommentDTO? editComment;

    private void BeginEdit()
    {
        if(Comment == null)
        { 
            return;
        }

        status = Status.Editing;

        editComment = new()
            {
                Id = Comment.Id,
                AuthorId = Comment.AuthorId,
                BlogPostId = Comment.BlogPostId,
                Content = Comment.Content
            };
    }

    private async Task HandleEdit()
    {
        if(editComment == null)
        {
            return;
        }

        await OnEdit.InvokeAsync(editComment);

        status = Status.Viewing;
    }

    private async Task HandleDelete()
    {
        if(Comment == null)
        {
            return;
        }

        await OnDelete.InvokeAsync(Comment);
        status = Status.Viewing;
    }
}
