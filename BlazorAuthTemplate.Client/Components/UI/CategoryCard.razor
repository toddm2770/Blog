@using BlazorAuthTemplate.Client.Helpers

@inject ICategoryService CategoryService

@if (Category is not null)
{
	if(status == Status.Viewing)
	{

		<div class="card h-100 shadow-lg mt-2 card-image">
			<div class="row g-0">
				<div class="col-12 col-md-4 rounded-start overflow-hidden">
					<img src="@Category.ImageUrl" class="square-img" style="max-height: 300px" />
				</div>
				<div class="col-12 col-md-8">
					<div class="card-body">
						<h5 class="card-title">@Category.Name</h5>
						<p>@Category.Description</p>
						<button class="btn btn-success">Browse Posts</button>
						<button @onclick="() => status = Status.Editing" class="btn btn-outline-success">Edit Category</button>
						<button @onclick="() => status = Status.Deleting" class="btn btn-outline-danger">DeleteCategory</button>
					</div>
				</div>
			</div>
		</div>
	}
	if(status == Status.Deleting)
	{
		<div class="card h-100 shadow-lg mt-2">
			<div class="row g-0">
				<div class="col-12 col-md-4 rounded-start overflow-hidden">
					<img src="@Category.ImageUrl" style="max-height: 200px" />
				</div>
				<div class="col-12 col-md-8">
					<div class="card-body">
						<h5 class="card-title">@Category.Name</h5>
						<p>@Category.Description</p>
						<h4 class="text-danger">Are you sure you want to delete this category?</h4>
						<button @onclick="DeleteItem" class="btn btn-danger">DeleteCategory</button>
						<button @onclick="() => status = Status.Viewing" class="btn btn-outline-danger">Cancel</button>
					</div>
				</div>
			</div>
		</div>
	}
	if(status == Status.Editing)
	{
		<EditForm Model="categoryForm" OnValidSubmit="UpdateItem">
			<div class="row">
				<div class="col-4">
					<img src="@(string.IsNullOrEmpty(categoryForm?.ImageUrl) ? ImageHelper.DefaultCategoryImage : categoryForm?.ImageUrl )"
						 class="rounded-start overflow-hidden" style="max-height: 350px" />
					<span class="text-danger">@fileError</span>
				</div>
				<div class="col-8">
					<div class="vstack">
						<label for="categoryName" class="form-label">Name</label>
						<InputText class="form-control" placeholder="Category Name" @bind-Value="categoryForm!.Name" />
						<ValidationMessage For="() => categoryForm.Name" />

						<label for="categoryDescription" class="form-label">Description</label>
						<InputTextArea class="form-control" placeholder="Describe the category" @bind-Value="categoryForm.Description" rows="3"></InputTextArea>
						<ValidationMessage For="() => categoryForm.Description" />

						<label for="categoryImage" class="form-label">Image</label>
						<InputFile OnChange="OnFileChange" @bind-Value="categoryForm.ImageUrl" class="form-control" accept=".png, .jpg, .jpeg, .svg" />
						<ValidationMessage For="() => categoryForm.ImageUrl" />
					</div>
					<div>
						<button type="submit" class="btn btn-primary mt-2 text-end">
							Save
						</button>
						<button @onclick="CancelEdit" class="btn btn-warning mt-2 text-end">Cancel</button>
					</div>
				</div>
			</div>
		</EditForm>
	}
}

@code {

	[Parameter, EditorRequired]
	public CategoryDTO? Category { get; set; }

	[Parameter]
	public EventCallback<CategoryDTO> OnDeleteCallBack{ get; set; }

	[Parameter]
	public EventCallback<CategoryDTO> OnEditCallBack { get; set; }

	private IEnumerable<CategoryDTO> categories = [];

	private string? fileError;

	private CategoryDTO? categoryForm;

	protected override void OnParametersSet()
	{
		categoryForm = new()
			{
				Id = Category.Id,
				Name = Category.Name,
				Description = Category.Description,
				ImageUrl = Category?.ImageUrl ?? ImageHelper.DefaultCategoryImage
			};
	}

	private enum Status
	{
		Viewing,
		Editing,
		Deleting
	}

	private Status status = Status.Viewing;

	public async Task DeleteItem()
	{
		try
		{
			await OnDeleteCallBack.InvokeAsync(Category);
			status = Status.Viewing;
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}

	private async Task UpdateItem()
	{
		try
		{
			await OnEditCallBack.InvokeAsync(categoryForm);
			status = Status.Viewing;
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}

	}

	private async Task OnFileChange(InputFileChangeEventArgs changeEvent)
	{
		fileError = null;

		IBrowserFile selectedFile = changeEvent.File;

		if (selectedFile.Size > ImageHelper.MaxFileSize)
		{
			fileError = "The selected image is too large.";
		}

		try
		{

			categoryForm!.ImageUrl = await ImageHelper.GetDataUrlAsync(selectedFile);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			fileError = "Could not read the selected file.";
		}
	}

	private async void CancelEdit()
	{
		categoryForm = new()
			{
				Id = Category.Id,
				Name = Category.Name,
				Description = Category.Description,
				ImageUrl = Category?.ImageUrl ?? ImageHelper.DefaultCategoryImage
			};
		status = Status.Viewing;
		categories = await CategoryService.GetCategoriesAsync();
	}
}
